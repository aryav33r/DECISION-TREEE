{"cells":[{"cell_type":"markdown","metadata":{"id":"_AH42Hc90zcA"},"source":["**Theoretical**"]},{"cell_type":"markdown","metadata":{"id":"ykc5B5Ac_uZE"},"source":["1. **What is a Decision Tree, and how does it work\t?**\n"]},{"cell_type":"markdown","metadata":{"id":"ZVfmJV_31flB"},"source":["ANSWER : A Decision Tree is a supervised machine learning algorithm used for both classification and regression tasks.\n","It's a flowchart-like structure where each internal node represents a feature (or attribute), each branch represents a decision rule, and each leaf node represents an outcome (or a class label).\n","The goal of a Decision Tree is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.\n","It is called a decision tree because, similar to a tree, it starts with a root and then branches off into different nodes, and at each node, we make a decision based on the features available. This continues until we arrive at the leaf node which is the output.\n","\n","\n","How does it work?\n","\n","Data Preparation: The algorithm starts with a dataset containing features and a target variable.\n","Feature Selection: It selects the best feature to split the data based on a metric like Gini impurity or information gain. The feature that best separates the data into different classes or values is chosen. This selection process is recursive, for each split, the best feature is selected again, and it goes on, until it reaches the leaf node.\n","Splitting: The data is split into subsets based on the selected feature's values.\n","Recursive Process: Steps 2 and 3 are repeated for each subset until a stopping criterion is met (e.g., all data points in a subset belong to the same class, or a maximum depth is reached).\n","Prediction: To make a prediction for a new data point, the algorithm traverses the tree from the root node down to a leaf node, following the decision rules at each node based on the data point's features. The value or class at the leaf node is the prediction.\n","Example: Imagine you want to predict whether a customer will buy a product based on their age and income. A decision tree might look like this:\n","\n","If age \u003c 30:\n","  If income \u003c 50k:\n","    Prediction: Not buy\n","  Else:\n","    Prediction: Buy\n","Else:\n","  If income \u003c 75k:\n","    Prediction: Not buy\n","  Else:\n","    Prediction: Buy\n","Use code with caution\n","In this example, the tree uses age and income as features to make a prediction about buying behavior.\n","\n","Advantages of Decision Trees\n","\n","Easy to understand and interpret.\n","Can handle both numerical and categorical data.\n","Requires little data preparation.\n","Non-parametric, meaning they don't make assumptions about the data distribution.\n","Disadvantages of Decision Trees\n","\n","Prone to overfitting, especially with complex trees.\n","Can be unstable, meaning small changes in the data can lead to large changes in the tree structure.\n","May not be the best choice for very large datasets."]},{"cell_type":"markdown","metadata":{"id":"OclHKG8v1num"},"source":["2. '**What are impurity measures in Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"JF-I60hg1tbs"},"source":["ANSWER : Impurity measures in Decision Trees.\n","\n","Impurity Measures\n","\n","Impurity measures are used in decision trees to evaluate how well a feature separates the data into different classes or values. The goal is to choose the feature that results in the purest subsets, meaning subsets where the majority of data points belong to the same class or have similar values.\n","\n","Here are two common impurity measures used in Decision Trees:\n","\n","Gini Impurity\n","\n","The Gini impurity is a measure of the probability of misclassifying a randomly chosen element from a dataset if it were randomly labeled according to the class distribution in the dataset.\n","It ranges from 0 to 1, where 0 represents a pure node (all data points belong to the same class) and 1 represents the most impure node (data points are evenly distributed across classes).\n","The lower the Gini impurity, the better the feature is at separating the data.\n","Information Gain/Entropy\n","\n","Entropy is a measure of the uncertainty or randomness in a dataset.\n","Information gain is the reduction in entropy achieved by splitting the data based on a particular feature.\n","It ranges from 0 to 1, where 0 represents no uncertainty (all data points belong to the same class) and 1 represents maximum uncertainty (data points are evenly distributed across classes).\n","The higher the information gain, the better the feature is at separating the data. And it's calculated using Entropy.\n","How Impurity Measures are Used in Decision Trees\n","\n","Feature Selection: When building a decision tree, the algorithm evaluates the impurity of each feature at each node.\n","Splitting: The feature that results in the greatest reduction in impurity (or the highest information gain) is chosen as the splitting feature for that node.\n","Recursive Process: This process is repeated recursively for each subset of data until a stopping criterion is met.\n","Choosing Between Gini Impurity and Information Gain\n","\n","Both Gini impurity and information gain are widely used and often produce similar results.\n","Gini impurity is computationally simpler to calculate than information gain.\n","Information gain tends to be more sensitive to features with a large number of distinct values."]},{"cell_type":"markdown","metadata":{"id":"HrbB6xWE2CKy"},"source":["3. **What is the mathematical formula for Gini Impurity\t?**"]},{"cell_type":"markdown","metadata":{"id":"zvEMgsJs2Jad"},"source":["ANSWER : Gini Impurity Formula\n","\n","The Gini impurity for a given set of data with k classes is calculated as follows:\n","\n","Gini Impurity = 1 - Σ (pi)^2\n","Use code with caution\n","where:\n","\n","pi is the proportion of data points belonging to class i in the set.\n","Σ denotes the summation over all classes (from i = 1 to k).\n","Explanation\n","\n","Proportion (pi): For each class i, calculate the proportion of data points belonging to that class within the set.\n","Square and Sum: Square each proportion (pi) and sum the squared values for all classes.\n","Subtract from 1: Subtract the sum of squared proportions from 1 to obtain the Gini impurity.\n","Example\n","\n","Suppose you have a dataset with 10 data points:\n","\n","6 belong to class A\n","4 belong to class B\n","To calculate the Gini impurity:\n","\n","Proportion of class A (pA): 6/10 = 0.6\n","Proportion of class B (pB): 4/10 = 0.4\n","Gini Impurity: 1 - [(0.6)^2 + (0.4)^2] = 1 - [0.36 + 0.16] = 0.48\n","Therefore, the Gini impurity for this dataset is 0.48.\n","\n","Interpretation\n","\n","A Gini impurity of 0 indicates a perfectly pure set where all data points belong to the same class.\n","A Gini impurity closer to 1 indicates a more impure set where data points are evenly distributed across classes.\n","In decision tree algorithms, the Gini impurity is used to evaluate the quality of a split. The goal is to choose the split that minimizes the Gini impurity of the resulting subsets, leading to purer nodes and a more accurate classification."]},{"cell_type":"markdown","metadata":{"id":"uCuBdGgN2Q_M"},"source":["4. **What is the mathematical formula for Entropy\t?**"]},{"cell_type":"markdown","metadata":{"id":"C-cdrpL62Y47"},"source":["AMSWER : the mathematical formula for Entropy.\n","\n","Entropy Formula\n","\n","Entropy is a measure of the uncertainty or randomness in a dataset. In the context of decision trees, it quantifies the impurity of a node.\n","\n","The formula for entropy is as follows:\n","\n","Entropy = - Σ (pi * log2(pi))\n","Use code with caution\n","where:\n","\n","pi is the proportion of data points belonging to class i in the set.\n","Σ denotes the summation over all classes (from i = 1 to k).\n","log2 represents the logarithm base 2.\n","Explanation\n","\n","Proportion (pi): For each class i, calculate the proportion of data points belonging to that class within the set.\n","Logarithmic Calculation: Calculate the logarithm base 2 of each proportion (pi).\n","Multiplication and Summation: Multiply each proportion (pi) by its corresponding logarithmic value and sum the results for all classes.\n","Negation: Negate the final sum to obtain the entropy.\n","Example\n","\n","Suppose you have a dataset with 10 data points:\n","\n","6 belong to class A\n","4 belong to class B\n","To calculate the entropy:\n","\n","Proportion of class A (pA): 6/10 = 0.6\n","Proportion of class B (pB): 4/10 = 0.4\n","Entropy: - [(0.6 * log2(0.6)) + (0.4 * log2(0.4))] ≈ 0.97\n","Therefore, the entropy for this dataset is approximately 0.97.\n","\n","Interpretation\n","\n","Entropy ranges from 0 to 1.\n","An entropy of 0 indicates a perfectly pure set where all data points belong to the same class.\n","An entropy of 1 indicates maximum uncertainty, where data points are evenly distributed across classes.\n","In decision trees, entropy is used in conjunction with information gain to select the best feature for splitting a node. The feature that results in the highest information gain (i.e., the greatest reduction in entropy) is chosen."]},{"cell_type":"markdown","metadata":{"id":"8PbW5A2B3CkA"},"source":["5. **What is Information Gain, and how is it used in Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"eJQRKc2c3QDq"},"source":["ANSWER : Information Gain and its role in Decision Trees.\n","\n","What is Information Gain?\n","\n","Information gain is a concept from information theory that quantifies the reduction in uncertainty about a target variable after observing a particular feature. In decision trees, it's used to measure how much a feature improves the purity of a node when used for splitting the data.\n","\n","How is Information Gain calculated?\n","\n","Information gain is calculated using the following formula:\n","\n","Information Gain = Entropy(parent) - [Weighted Average]Entropy(children)\n","Use code with caution\n","where:\n","\n","Entropy(parent) is the entropy of the parent node before the split.\n","Entropy(children) is the entropy of each child node after the split.\n","Weighted Average is the weighted average of the children's entropies, based on the proportion of data points in each child node.\n","How is Information Gain used in Decision Trees?\n","\n","Feature Selection: When building a decision tree, the algorithm evaluates the information gain for each feature at each node.\n","\n","Splitting: The feature with the highest information gain is selected as the splitting feature for that node. This is because it's considered the feature that best reduces uncertainty and improves the purity of the resulting subsets.\n","\n","Recursive Process: This process is repeated recursively for each subset of data until a stopping criterion is met (e.g., all data points in a subset belong to the same class, or a maximum depth is reached).\n","\n","Why is Information Gain important?\n","\n","Information gain is crucial in decision trees because it helps the algorithm make informed decisions about which features to use for splitting the data. By selecting features that maximize information gain, the decision tree can effectively partition the data into more homogeneous subsets, leading to better classification or regression performance.\n","\n","In summary, information gain is a key concept in decision trees that helps the algorithm select the most informative features for splitting the data, leading to a more accurate and efficient model."]},{"cell_type":"markdown","metadata":{"id":"0gvfjq003Y4p"},"source":["6. **What is the difference between Gini Impurity and Entropy\t?**"]},{"cell_type":"markdown","metadata":{"id":"bZaNkZTg3kzW"},"source":["ANSWER :  the difference between Gini Impurity and Entropy.\n","\n","Both Gini Impurity and Entropy are metrics used in decision trees to measure the impurity of a node. They help the algorithm decide which feature to use for splitting the data at each node. While they often lead to similar results, there are some key differences between them:\n","\n","Gini Impurity\n","\n","Formula: Gini Impurity = 1 - Σ (pi)^2, where pi is the proportion of data points belonging to class i in the set.\n","Range: 0 to 0.5 (for binary classification) or 0 to 1 (for multi-class classification).\n","Interpretation:\n","0 represents a pure node (all data points belong to the same class).\n","Values closer to 0.5 or 1 represent increasing impurity.\n","Computation: Generally faster to compute than entropy.\n","Focus: Emphasizes misclassification probability.\n","Entropy\n","\n","Formula: Entropy = - Σ (pi * log2(pi)), where pi is the proportion of data points belonging to class i in the set.\n","Range: 0 to 1.\n","Interpretation:\n","0 represents a pure node (all data points belong to the same class).\n","Values closer to 1 represent increasing uncertainty or randomness.\n","Computation: Can be slightly slower to compute than Gini impurity due to the logarithmic calculation.\n","Focus: Measures the uncertainty or randomness in the data.\n","Key Differences\n","\n","Range: Gini impurity has a smaller range compared to entropy, especially in binary classification cases.\n","Calculation: Gini impurity is computationally simpler and faster to calculate than entropy.\n","Focus: Gini impurity focuses on the probability of misclassification, while entropy measures the uncertainty or randomness in the data.\n","Sensitivity: Entropy can be more sensitive to features with a large number of distinct values.\n","In Practice\n","\n","Both Gini impurity and entropy are widely used in decision tree algorithms, and they often produce similar results. The choice between them often depends on personal preference or specific requirements of the task.\n","\n","If computational efficiency is a concern, Gini impurity might be preferred due to its faster calculation.\n","If the dataset has features with many distinct values, entropy might be a better choice due to its sensitivity."]},{"cell_type":"markdown","metadata":{"id":"TMl4oUyR3w8H"},"source":["7. **What is the mathematical explanation behind Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"9zIWQngF4AQN"},"source":["ANSWER : the mathematical explanation behind Decision Trees.\n","\n","Mathematical Foundation\n","\n","Decision Trees are built upon the principles of:\n","\n","Recursive Partitioning: The dataset is recursively divided into subsets based on the values of features, aiming to create increasingly homogeneous subsets with respect to the target variable.\n","\n","Impurity Measures: Metrics like Gini Impurity or Entropy are used to quantify the impurity or uncertainty within a node. The goal is to minimize impurity as the tree grows.\n","\n","Information Gain: Information Gain measures the reduction in impurity achieved by splitting a node based on a particular feature. The feature that maximizes information gain is chosen for the split.\n","\n","Tree Structure: The resulting tree structure represents a series of decisions based on feature values, leading to predictions at the leaf nodes.\n","\n","Mathematical Formulation\n","\n","Let's break down the mathematical steps involved in building a Decision Tree:\n","\n","Start with the entire dataset (D) and the target variable (Y).\n","\n","For each feature (X): a. Calculate the impurity of the current node using Gini Impurity or Entropy. b. For each possible split point of the feature:\n","\n"," i. Split the data into two subsets (D1 and D2) based on the split point.\n"," ii. Calculate the weighted average impurity of the two subsets.\n"," iii. Calculate the Information Gain for the split:\n","     `Information Gain = Impurity(D) - Weighted Average Impurity(D1, D2)`\n","c. Select the split point that maximizes Information Gain for the feature.\n","\n","Choose the feature with the highest Information Gain as the splitting feature for the current node.\n","\n","Create two child nodes based on the selected split point.\n","\n","Recursively repeat steps 2-4 for each child node until a stopping criterion is met:\n","\n","All data points in a node belong to the same class.\n","A maximum depth is reached.\n","The number of data points in a node falls below a threshold.\n","Assign the majority class (for classification) or the average value (for regression) to each leaf node.\n","\n","Mathematical Intuition\n","\n","The mathematical essence of Decision Trees lies in finding the optimal splits that minimize impurity and maximize information gain. By recursively applying this principle, the tree learns a hierarchical structure of decision rules that effectively separates data points based on their features and predicts the target variable.\n","\n","Note: While this explanation provides a simplified overview, the actual implementation of Decision Tree algorithms may involve further considerations and optimizations, such as handling missing values, pruning the tree to avoid overfitting, and dealing with continuous features."]},{"cell_type":"markdown","metadata":{"id":"DFTArwjd4Dtq"},"source":["8. **What is Pre-Pruning in Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"TLEG-UsB4MRB"},"source":["ANSWER :  Pre-Pruning in Decision Trees.\n","\n","Pre-Pruning\n","\n","Pre-pruning, also known as early stopping, is a technique used in Decision Trees to prevent overfitting by stopping the tree growth early before it becomes too complex. It involves setting constraints or limits on the tree's growth during the building process.\n","\n","How Pre-Pruning Works\n","\n","Pre-pruning techniques typically involve stopping the tree growth based on certain criteria. Some common pre-pruning strategies include:\n","\n","Maximum Depth: Limiting the maximum depth of the tree, which restricts the number of levels or decisions the tree can make.\n","\n","Minimum Samples Split: Setting a minimum number of samples required to split a node. If a node has fewer samples than the specified threshold, it will not be split further.\n","\n","Minimum Samples Leaf: Setting a minimum number of samples required to be present in a leaf node. If a split would result in a leaf node with fewer samples than the threshold, the split is not performed.\n","\n","Maximum Leaf Nodes: Limiting the total number of leaf nodes in the tree.\n","\n","Maximum Features: Restricting the number of features considered for splitting at each node.\n","\n","Benefits of Pre-Pruning\n","\n","Reduces Overfitting: By stopping the tree growth early, pre-pruning helps prevent the tree from becoming too complex and memorizing the training data, which can lead to overfitting.\n","\n","Improves Generalization: A simpler tree obtained through pre-pruning is more likely to generalize well to unseen data, improving the model's performance on new examples.\n","\n","Reduces Computational Cost: Pre-pruning can reduce the computational cost of building the tree by stopping the growth process earlier.\n","\n","Considerations for Pre-Pruning\n","\n","Choosing the Right Criteria: Selecting the appropriate pre-pruning criteria and their values is crucial to achieving the desired balance between tree complexity and generalization performance.\n","\n","Hyperparameter Tuning: Pre-pruning often involves hyperparameters that need to be tuned using techniques like cross-validation to find the optimal values for the specific dataset.\n","\n","Trade-off with Underfitting: While pre-pruning helps prevent overfitting, excessive pruning can lead to underfitting, where the tree is too simple to capture the underlying patterns in the data.\n","\n","In summary, pre-pruning is a valuable technique in Decision Trees that helps prevent overfitting, improves generalization, and reduces computational cost. By carefully choosing the pre-pruning criteria and tuning the hyperparameters, you can build more robust and accurate Decision Tree models."]},{"cell_type":"markdown","metadata":{"id":"y9KebL604c5A"},"source":["9.  **What is Post-Pruning in Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"sb61gwYP4ky8"},"source":["ANSWER :  Post-Pruning in Decision Trees.\n","\n","Post-Pruning\n","\n","Post-pruning, also known as backward pruning, is a technique used in Decision Trees to reduce overfitting by removing or collapsing nodes after the tree has been fully grown. It involves evaluating the performance of the tree on a validation dataset and selectively removing branches that do not improve generalization.\n","\n","How Post-Pruning Works\n","\n","Grow the Tree: The Decision Tree is first grown to its full size without any restrictions.\n","\n","Evaluate Performance: The performance of the tree is evaluated on a separate validation dataset using a suitable metric (e.g., accuracy, precision, recall).\n","\n","Prune Branches: Starting from the bottom of the tree, the algorithm iteratively evaluates the impact of removing or collapsing each node on the validation performance. If removing a node or branch does not decrease the performance or even improves it, the pruning is performed.\n","\n","Stopping Criteria: The pruning process continues until further pruning starts to decrease the validation performance or until a desired level of complexity is achieved.\n","\n","Types of Post-Pruning\n","\n","There are different approaches to post-pruning, including:\n","\n","Reduced Error Pruning: This method replaces a subtree with a leaf node if it reduces the error on the validation set.\n","Cost Complexity Pruning: This approach uses a cost function that balances the size of the tree with its error rate to find the optimal pruned tree.\n","Minimum Error Pruning: This technique selects the subtree with the lowest error on the validation set.\n","Benefits of Post-Pruning\n","\n","Reduces Overfitting: Post-pruning effectively removes unnecessary branches that might have overfit the training data, leading to a more generalized model.\n","\n","Improves Generalization: By simplifying the tree structure, post-pruning enhances the model's ability to generalize to unseen data.\n","\n","Better Accuracy: Post-pruning can often lead to improved accuracy on the validation and test datasets compared to an unpruned tree.\n","\n","Considerations for Post-Pruning\n","\n","Validation Dataset: A separate validation dataset is crucial for evaluating the performance of the pruned tree and avoiding overfitting to the training data.\n","\n","Computational Cost: Post-pruning can be computationally more expensive than pre-pruning, as it involves building the full tree first and then evaluating different pruning strategies.\n","\n","Pruning Criteria: Choosing the appropriate pruning criteria and stopping criteria is important to achieve the desired balance between tree complexity and generalization performance.\n","\n","post-pruning is a powerful technique for improving the performance and generalization of Decision Trees. By carefully applying post-pruning strategies, you can create more robust and accurate models that perform well on unseen data."]},{"cell_type":"markdown","metadata":{"id":"YtMh-ekH4toG"},"source":["10. **What is the difference between Pre-Pruning and Post-Pruning\t?**"]},{"cell_type":"markdown","metadata":{"id":"8cmLn2ug4zHA"},"source":["ANSWER : the difference between Pre-Pruning and Post-Pruning in Decision Trees.\n","\n","Both pre-pruning and post-pruning are techniques used to address overfitting in Decision Trees by controlling the tree's complexity. However, they differ in when and how they prune the tree:\n","\n","Pre-Pruning\n","\n","When: Occurs during the tree construction process.\n","How: Stops the tree from growing beyond a certain point by setting limits or constraints on its growth.\n","Mechanism: Uses criteria like maximum depth, minimum samples split, minimum samples leaf, maximum leaf nodes, or maximum features to stop further splitting of nodes.\n","Advantages:\n","Reduces overfitting by preventing the tree from becoming too complex.\n","Improves generalization to unseen data.\n","Reduces computational cost by stopping growth early.\n","Disadvantages:\n","Risk of underfitting if pruning criteria are too strict.\n","Difficulty in choosing the optimal pruning criteria beforehand.\n","Post-Pruning\n","\n","When: Occurs after the tree has been fully grown.\n","How: Selectively removes or collapses nodes that do not improve generalization performance on a validation dataset.\n","Mechanism: Evaluates the impact of removing nodes on the validation performance and prunes branches that don't improve or even worsen it.\n","Advantages:\n","More effective in reducing overfitting compared to pre-pruning.\n","Better chance of finding the optimal tree structure.\n","Often leads to improved accuracy on unseen data.\n","Disadvantages:\n","Computationally more expensive as it requires building the full tree first.\n","Needs a separate validation dataset for evaluation.\n","Key Differences in a Table\n","\n","Feature\tPre-Pruning\tPost-Pruning\n","Timing\tDuring tree construction\tAfter tree construction\n","Approach\tStops tree growth early\tRemoves nodes from a fully grown tree\n","Complexity\tSimpler to implement\tMore complex\n","Computational Cost\tLower\tHigher\n","Overfitting Control\tLess effective\tMore effective\n","Generalization\tGood\tPotentially better\n","In Summary\n","\n","Pre-pruning is a proactive approach that prevents overfitting by limiting tree growth.\n","Post-pruning is a reactive approach that removes unnecessary complexity after the tree is built.\n","The choice between pre-pruning and post-pruning depends on the specific dataset, computational resources, and desired level of accuracy. In many cases, post-pruning is preferred due to its ability to achieve better generalization performance. However, pre-pruning can be a good option when computational efficiency is a concern."]},{"cell_type":"markdown","metadata":{"id":"GOJQ6X-F4_U6"},"source":["11. **What is a Decision Tree Regressor\t?**"]},{"cell_type":"markdown","metadata":{"id":"ob3ttSFT5FgW"},"source":["ANSWER :  Decision Tree Regressors.\n","\n","Decision Tree Regressor\n","\n","A Decision Tree Regressor is a type of Decision Tree algorithm used for solving regression problems, where the target variable is continuous rather than categorical. It works by partitioning the data into smaller subsets and predicting the average value of the target variable within each subset.\n","\n","How it Works\n","\n","Tree Construction: The Decision Tree Regressor builds a tree structure by recursively splitting the data based on features, similar to a Decision Tree Classifier. However, instead of predicting a class label, it predicts a continuous value.\n","\n","Prediction: To make a prediction for a new data point, the algorithm traverses the tree from the root node down to a leaf node, following the decision rules at each node based on the data point's features. The predicted value is the average value of the target variable for all data points in that leaf node.\n","\n","Splitting Criteria: The splitting criteria for a Decision Tree Regressor are typically based on minimizing the variance or mean squared error within each subset. The goal is to create subsets that have similar target variable values.\n","\n","Example\n","\n","Imagine you want to predict the price of a house based on its features like size, location, and number of bedrooms. A Decision Tree Regressor might create a tree structure like this:\n","\n","If size \u003e 1500 sq ft:\n","  If location is urban:\n","    Predicted price = $500,000\n","  Else:\n","    Predicted price = $400,000\n","Else:\n","  If number of bedrooms \u003e 3:\n","    Predicted price = $350,000\n","  Else:\n","    Predicted price = $300,000\n","Use code with caution\n","In this example, the tree uses features like size, location, and number of bedrooms to predict the price of a house.\n","\n","Advantages of Decision Tree Regressors\n","\n","Easy to Understand and Interpret: The tree structure is easy to visualize and understand, making it a transparent model.\n","\n","Handles Non-linear Relationships: Decision Tree Regressors can capture non-linear relationships between features and the target variable.\n","\n","No Feature Scaling Required: Unlike some other regression algorithms, Decision Tree Regressors do not require feature scaling.\n","\n","Disadvantages of Decision Tree Regressors\n","\n","Prone to Overfitting: Decision Tree Regressors can easily overfit the training data, leading to poor generalization performance. Techniques like pruning and ensemble methods can help mitigate this issue.\n","\n","Instability: Small changes in the data can lead to significant changes in the tree structure, making the model unstable.\n","\n","Limited Expressiveness: Decision Tree Regressors may not be able to capture complex relationships between features and the target variable as effectively as some other regression algorithms."]},{"cell_type":"markdown","metadata":{"id":"qatoe1S95V0Y"},"source":["12. **What are the advantages and disadvantages of Decision Trees\t?**"]},{"cell_type":"markdown","metadata":{"id":"64Hdaz1t5dnB"},"source":["ANSWER :  the advantages and disadvantages of Decision Trees.\n","\n","Advantages of Decision Trees\n","\n","Easy to Understand and Interpret: Decision Trees are easy to visualize and understand, making them transparent and interpretable models. The tree structure clearly shows the decision rules used for prediction, which can be easily explained to non-technical stakeholders.\n","\n","Handles Both Numerical and Categorical Data: Decision Trees can handle both numerical and categorical data without requiring extensive data preprocessing. This makes them versatile and applicable to a wide range of datasets.\n","\n","Requires Little Data Preparation: Decision Trees typically require minimal data preparation compared to other algorithms. They are less sensitive to outliers and missing values, and they don't require feature scaling or normalization.\n","\n","Non-parametric: Decision Trees are non-parametric models, meaning they don't make assumptions about the underlying data distribution. This makes them robust and applicable to datasets with complex or unknown distributions.\n","\n","Feature Importance: Decision Trees can provide insights into the importance of different features in making predictions. The features used for splitting at higher levels of the tree are generally considered more important.\n","\n","Disadvantages of Decision Trees\n","\n","Prone to Overfitting: Decision Trees can easily overfit the training data, especially when they are deep and complex. This can lead to poor generalization performance on unseen data. Techniques like pruning and ensemble methods (e.g., Random Forests) can help mitigate this issue.\n","\n","Instability: Decision Trees can be unstable, meaning small changes in the data can lead to significant changes in the tree structure. This can make the model less reliable and difficult to reproduce.\n","\n","Limited Expressiveness: Decision Trees may not be able to capture complex relationships between features and the target variable as effectively as some other algorithms, such as neural networks. They are better suited for datasets with relatively simple relationships.\n","\n","Bias Towards Dominant Features: Decision Trees can be biased towards features with more distinct values. This can lead to inaccurate predictions if the dataset has features with a large number of unique values.\n","\n","Computational Cost: While building a single decision tree is relatively fast, training complex ensembles of decision trees (e.g., Random Forests) can be computationally expensive.\n","\n","\n","\n","Decision Trees offer a good balance between interpretability, flexibility, and performance. They are widely used for various tasks, such as classification, regression, and feature selection. However, it's important to be aware of their limitations and apply appropriate techniques to mitigate overfitting and instability."]},{"cell_type":"markdown","metadata":{"id":"Wo_P8mX05z3q"},"source":["13. **How does a Decision Tree handle missing values?**"]},{"cell_type":"markdown","metadata":{"id":"ZaRoleFD5-L2"},"source":["ANSWER : Decision Trees handle missing values.\n","\n","Decision Trees have inherent mechanisms for handling missing values during both the training and prediction phases. Here's how they address this issue:\n","\n","During Training\n","\n","Ignoring Missing Values: In some implementations, the simplest approach is to ignore data points with missing values for the specific feature being considered for a split. This can lead to a loss of information, but it's computationally efficient.\n","\n","Imputation with the Most Frequent Value: For categorical features, missing values can be replaced with the most frequent value of that feature in the training data. This is a simple and common imputation technique.\n","\n","Imputation with the Mean/Median: For numerical features, missing values can be replaced with the mean or median value of that feature in the training data. This helps maintain the distribution of the feature.\n","\n","Surrogate Splits: This technique involves finding a surrogate feature that is highly correlated with the feature containing missing values. When a data point has a missing value for the primary feature, the surrogate feature is used to determine the split instead. This helps preserve information and improve accuracy.\n","\n","During Prediction\n","\n","Following the Branch with the Most Frequent Value: If a data point has a missing value for a feature used in a split, the prediction process follows the branch corresponding to the most frequent value of that feature in the training data.\n","\n","Following Multiple Branches with Probabilities: A more sophisticated approach involves following multiple branches with probabilities proportional to the frequency of each value in the training data. This provides a more nuanced prediction based on the distribution of the missing feature.\n","\n","Predicting the Average Value: In some cases, if a data point has missing values for multiple features used in a sequence of splits, the prediction might simply be the average value of the target variable for all data points that reach that specific leaf node.\n","\n","Advantages of Decision Tree Handling of Missing Values\n","\n","No Need for Explicit Imputation: Decision Trees can handle missing values directly without requiring explicit imputation before training.\n","\n","Robustness: Decision Trees are generally robust to missing values and can still provide accurate predictions even with incomplete data.\n","\n","Flexibility: Decision Trees offer various strategies for handling missing values, allowing you to choose the approach that best suits your data and task.\n","\n","\n","\n","Decision Trees offer efficient and effective ways to handle missing values. They can use various strategies during both training and prediction to minimize the impact of missing data on the model's performance. This robustness is one of the reasons why Decision Trees are a popular choice for various data science and machine learning applications."]},{"cell_type":"markdown","metadata":{"id":"QBPAPczZ6Xej"},"source":["14. **How does a Decision Tree handle categorical features\t?**"]},{"cell_type":"markdown","metadata":{"id":"pRXLedeb6hnG"},"source":["ANSWER : a Decision Tree handles categorical features.\n","\n","Decision Trees can handle categorical features effectively using various techniques. Here's a breakdown of the common approaches:\n","\n","1. Binary Splitting for Nominal Features:\n","\n","Nominal features are categorical features without any inherent order (e.g., colors, countries).\n","For nominal features with a small number of categories, the decision tree can create a separate branch for each category.\n","For nominal features with a large number of categories, binary splitting is often used.\n","In binary splitting, the categories are divided into two subsets, and the split is based on whether a data point belongs to one subset or the other.\n","The algorithm searches for the best binary split that maximizes information gain or minimizes impurity.\n","2. Ordinal Encoding for Ordinal Features:\n","\n","Ordinal features are categorical features with a natural order (e.g., education levels, customer satisfaction ratings).\n","Ordinal encoding assigns numerical values to the categories based on their order.\n","This allows the decision tree to treat the ordinal feature as a numerical feature and perform splits based on numerical thresholds.\n","3. One-Hot Encoding for Nominal Features (with Many Categories):\n","\n","One-hot encoding creates a new binary feature for each category of the nominal feature.\n","If a data point belongs to a particular category, the corresponding binary feature is set to 1, and all other binary features are set to 0.\n","This allows the decision tree to consider each category as a separate feature and make splits based on their presence or absence.\n","Example:\n","\n","Let's say you have a categorical feature \"Color\" with categories: Red, Green, and Blue.\n","\n","Binary Splitting: The tree might split the data into two subsets: {Red, Green} and {Blue}.\n","One-Hot Encoding: Three new binary features would be created: \"Color_Red,\" \"Color_Green,\" and \"Color_Blue.\" A data point with color \"Red\" would have \"Color_Red\" set to 1 and the other two features set to 0.\n","Choosing the Right Approach:\n","\n","The choice of which approach to use depends on the specific dataset and the nature of the categorical feature.\n","\n","Binary splitting is generally preferred for nominal features with a small number of categories.\n","Ordinal encoding is suitable for ordinal features where the order of categories is meaningful.\n","One-hot encoding is often used for nominal features with a large number of categories to avoid creating too many branches in the tree.\n","Advantages of Decision Tree Handling of Categorical Features:\n","\n","Flexibility: Decision Trees can handle various types of categorical features using different encoding schemes.\n","Interpretability: The splits based on categorical features are easy to understand and interpret.\n","No Assumptions about Data Distribution: Decision Trees don't make assumptions about the distribution of categorical features, making them robust to different data patterns.\n"," Decision Trees provide flexible and effective ways to handle categorical features, allowing them to be used in a wide range of data science and machine learning application ."]},{"cell_type":"markdown","metadata":{"id":"9eAguYDY6sZM"},"source":["15. ** What are some real-world applications of Decision Trees?**"]},{"cell_type":"markdown","metadata":{"id":"hW5e-Dyr6ycV"},"source":["ANSWER : some real-world applications of Decision Trees.\n","\n","Decision Trees are versatile algorithms used in various domains for solving both classification and regression problems. Here are some notable real-world applications:\n","\n","1. Customer Relationship Management (CRM):\n","\n","Customer Churn Prediction: Decision Trees can be used to identify customers who are likely to churn (cancel their subscription or stop using a service). By analyzing customer demographics, purchase history, and interactions, the tree can identify patterns and predict churn risk. This allows businesses to take proactive measures to retain valuable customers.\n","Targeted Marketing: Decision Trees can help segment customers based on their characteristics and preferences, enabling businesses to target specific groups with personalized marketing campaigns. This leads to more effective marketing efforts and improved customer engagement.\n","2. Healthcare:\n","\n","Disease Diagnosis: Decision Trees can assist in diagnosing diseases based on patient symptoms, medical history, and test results. By learning patterns from historical data, the tree can provide probabilities of different diseases and aid doctors in making informed decisions.\n","Treatment Recommendation: Decision Trees can be used to recommend personalized treatment plans based on patient characteristics and disease stage. By considering various factors, the tree can suggest the most effective treatment options, improving patient outcomes.\n","3. Finance:\n","\n","Loan Approval: Decision Trees can be used to assess the creditworthiness of loan applicants. By analyzing financial data such as income, debt, and credit history, the tree can predict the likelihood of loan default and help financial institutions make informed lending decisions.\n","Fraud Detection: Decision Trees can be employed to detect fraudulent transactions by identifying suspicious patterns in financial data. By learning from historical fraud cases, the tree can flag potentially fraudulent activities and prevent financial losses.\n","4. Operations and Manufacturing:\n","\n","Predictive Maintenance: Decision Trees can be used to predict equipment failures and schedule maintenance proactively. By analyzing sensor data and historical maintenance records, the tree can identify patterns that indicate impending failures, minimizing downtime and reducing costs.\n","Quality Control: Decision Trees can help identify defects in manufactured products by analyzing production data and quality inspection results. By learning from historical defect patterns, the tree can flag potential quality issues and improve product quality.\n","5. Natural Language Processing (NLP):\n","\n","Sentiment Analysis: Decision Trees can be used to classify text into different sentiment categories (e.g., positive, negative, neutral). By analyzing the words and phrases used in the text, the tree can determine the overall sentiment expressed.\n","Spam Filtering: Decision Trees can be employed to identify and filter spam emails by analyzing the content and sender information. By learning from known spam patterns, the tree can classify incoming emails as spam or legitimate.\n","These are just a few examples of the many real-world applications of Decision Trees. Their versatility and interpretability make them valuable tools for solving a wide range of problems across various industries."]},{"cell_type":"markdown","metadata":{"id":"IVNbq7tM64G1"},"source":["**Practical**"]},{"cell_type":"markdown","metadata":{"id":"GNuvev4gAI5Z"},"source":["16. **Write a Python program to train a Decision Tree Classifier on the Iris dataset and print the model accuracy ?**"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4304,"status":"ok","timestamp":1747296848651,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"kjEhsm0cAXYZ","outputId":"4607c8d0-0166-4b69-dfc3-f3a1bb243201"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 1.0\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object\n","clf = DecisionTreeClassifier()\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Make predictions on the testing data\n","y_pred = clf.predict(X_test)\n","\n","# Calculate the accuracy of the model\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","# Print the accuracy\n","print(\"Accuracy:\", accuracy)"]},{"cell_type":"markdown","metadata":{"id":"ZM00Z3IJAhA-"},"source":["Reasoning:\n","\n","Import necessary libraries: We import load_iris to load the dataset, train_test_split to split data, DecisionTreeClassifier for the model, and accuracy_score for evaluation.\n","Load the Iris dataset: load_iris() loads the dataset, and we assign features to X and the target variable to y.\n","Split the data: train_test_split divides the data into training and testing sets (70% for training, 30% for testing). random_state ensures consistent splitting.\n","Create and train the model: We create a DecisionTreeClassifier object and train it using the training data (X_train, y_train).\n","Make predictions: We use the trained model to predict on the testing data (X_test).\n","Calculate and print accuracy: accuracy_score compares predictions (y_pred) with actual labels (y_test) to calculate accuracy, which is then printed."]},{"cell_type":"markdown","metadata":{"id":"xLHUujfFAh_R"},"source":["17. **Write a Python program to train a Decision Tree Classifier using Gini Impurity as the criterion and print the\n","feature importances ?**"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1747296966988,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"WqRSOZaJAwc9","outputId":"2929f299-8a84-4504-a845-aaa47a029b12"},"outputs":[{"name":"stdout","output_type":"stream","text":["Feature 0: sepal length (cm), Importance: 0.01911001911001911\n","Feature 1: sepal width (cm), Importance: 0.01911001911001911\n","Feature 2: petal length (cm), Importance: 0.8741535326901181\n","Feature 3: petal width (cm), Importance: 0.08762642908984374\n"]}],"source":["import pandas as pd\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a DecisionTreeClassifier object with Gini impurity as the criterion\n","clf = DecisionTreeClassifier(criterion='gini') # default is gini\n","\n","# Fit the model to the training data\n","clf.fit(X_train, y_train)\n","\n","# Get feature importances\n","importances = clf.feature_importances_\n","\n","# Print feature importances\n","for i, importance in enumerate(importances):\n","    print(f\"Feature {i}: {iris.feature_names[i]}, Importance: {importance}\")"]},{"cell_type":"markdown","metadata":{"id":"QV0UgrAFA9AU"},"source":["Reasoning:\n","\n","Import necessary libraries: We import pandas, DecisionTreeClassifier, load_iris, and train_test_split.\n","Load the Iris dataset: Similar to the previous example, we load the dataset using load_iris().\n","Split the data: Again, we use train_test_split to divide the data into training and testing sets.\n","Create and train the model: We create a DecisionTreeClassifier object with criterion='gini' to specify Gini impurity as the criterion. Then, we train the model using fit().\n","Get and print feature importances: We access the feature importances using clf.feature_importances_ and print them along with the corresponding feature names."]},{"cell_type":"markdown","metadata":{"id":"oy_0VsKtBBBO"},"source":["18. **Write a Python program to train a Decision Tree Classifier using Entropy as the splitting criterion and print the\n","model accuracy ?**"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1158,"status":"ok","timestamp":1747297037675,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"_C32bG7fBJIv","outputId":"9212809d-ad46-4539-8e2d-08e7ae74ad6a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 0.9777777777777777\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object with Entropy as the criterion\n","clf = DecisionTreeClassifier(criterion='entropy')\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Make predictions on the testing data\n","y_pred = clf.predict(X_test)\n","\n","# Calculate the accuracy of the model\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","# Print the accuracy\n","print(\"Accuracy:\", accuracy)"]},{"cell_type":"markdown","metadata":{"id":"Kf2JYMmsBPhN"},"source":["Reasoning\n","\n","Import necessary libraries: We import load_iris to load the dataset, train_test_split to split data, DecisionTreeClassifier for the model, and accuracy_score for evaluation.\n","Load the Iris dataset: load_iris() loads the dataset, and we assign features to X and the target variable to y.\n","Split the data: train_test_split divides the data into training and testing sets (70% for training, 30% for testing). random_state ensures consistent splitting.\n","Create and train the model: We create a DecisionTreeClassifier object with criterion='entropy' to specify Entropy as the criterion. Then, we train the model using fit().\n","Make predictions: We use the trained model to predict on the testing data (X_test).\n","Calculate and print accuracy: accuracy_score compares predictions (y_pred) with actual labels (y_test) to calculate accuracy, which is then printed."]},{"cell_type":"markdown","metadata":{"id":"p8_Jm4PjBUz_"},"source":["19. **Write a Python program to train a Decision Tree Regressor on a housing dataset and evaluate using Mean\n","Squared Error (MSE) ?**"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"executionInfo":{"elapsed":1942,"status":"error","timestamp":1747297120653,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"l-9Cd6QVBbMY","outputId":"257f71d1-c918-4201-d107-32dd76cc59e1"},"outputs":[{"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'housing.csv'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-4-70d96810388d\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 0\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Load the housing dataset (replace 'housing.csv' with your dataset file)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 8\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'housing.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Assuming 'target' is the target variable column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'housing.csv'"]}],"source":["# Import necessary libraries\n","import pandas as pd\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","# Load the housing dataset (replace 'housing.csv' with your dataset file)\n","data = pd.read_csv('housing.csv')\n","\n","# Assuming 'target' is the target variable column name\n","X = data.drop('target', axis=1)\n","y = data['target']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create a DecisionTreeRegressor object\n","regressor = DecisionTreeRegressor()\n","\n","# Fit the model to the training data\n","regressor.fit(X_train, y_train)\n","\n","# Make predictions on the testing data\n","y_pred = regressor.predict(X_test)\n","\n","# Calculate the Mean Squared Error (MSE)\n","mse = mean_squared_error(y_test, y_pred)\n","\n","# Print the MSE\n","print(\"Mean Squared Error (MSE):\", mse)"]},{"cell_type":"markdown","metadata":{"id":"K4KqU69IBkv-"},"source":["Reasoning:\n","\n","Import necessary libraries: We import pandas for data handling, DecisionTreeRegressor for the model, train_test_split for data splitting, and mean_squared_error for evaluation.\n","Load the housing dataset: Replace 'housing.csv' with the actual path to your housing dataset file. We use pd.read_csv to load the data into a pandas DataFrame.\n","Prepare the data: Assuming your target variable column is named 'target', we separate features (X) and the target (y) using data.drop and data['target'], respectively.\n","Split the data: train_test_split divides the data into training and testing sets (80% for training, 20% for testing). random_state ensures consistent splitting.\n","Create and train the model: We create a DecisionTreeRegressor object and train it using the training data (X_train, y_train).\n","Make predictions: We use the trained model to predict on the testing data (X_test).\n","Calculate and print MSE: mean_squared_error calculates the MSE between actual values (y_test) and predictions (y_pred), which is then printed.\n","Before running the code\n","\n","Replace 'housing.csv' with the actual path to your housing dataset file.\n","Ensure that the target variable column in your dataset is named 'target'. If it's named differently, adjust the code accordingly (e.g., y = data['house_price'])."]},{"cell_type":"markdown","metadata":{"id":"u88wlJXJBloG"},"source":["20. **Write a Python program to train a Decision Tree Classifier and visualize the tree using graphviz ?**"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":936},"executionInfo":{"elapsed":1827,"status":"ok","timestamp":1747297346100,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"7oNYagXzBrjV","outputId":"c56ff179-d4ab-4d35-bcee-2eea198a3a23"},"outputs":[{"data":{"image/svg+xml":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\n\u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e\n\u003c!-- Generated by graphviz version 2.43.0 (0)\n --\u003e\n\u003c!-- Title: Tree Pages: 1 --\u003e\n\u003csvg width=\"863pt\" height=\"671pt\"\n viewBox=\"0.00 0.00 863.00 671.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u003e\n\u003cg id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 667)\"\u003e\n\u003ctitle\u003eTree\u003c/title\u003e\n\u003cpolygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-667 859,-667 859,4 -4,4\"/\u003e\n\u003c!-- 0 --\u003e\n\u003cg id=\"node1\" class=\"node\"\u003e\n\u003ctitle\u003e0\u003c/title\u003e\n\u003cpath fill=\"#ffffff\" stroke=\"black\" d=\"M509.5,-663C509.5,-663 387.5,-663 387.5,-663 381.5,-663 375.5,-657 375.5,-651 375.5,-651 375.5,-592 375.5,-592 375.5,-586 381.5,-580 387.5,-580 387.5,-580 509.5,-580 509.5,-580 515.5,-580 521.5,-586 521.5,-592 521.5,-592 521.5,-651 521.5,-651 521.5,-657 515.5,-663 509.5,-663\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"383.5\" y=\"-647.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal width (cm) ≤ 0.8\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"413\" y=\"-632.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.664\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"403.5\" y=\"-617.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 105\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"390.5\" y=\"-602.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [31, 37, 37]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"396\" y=\"-587.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 1 --\u003e\n\u003cg id=\"node2\" class=\"node\"\u003e\n\u003ctitle\u003e1\u003c/title\u003e\n\u003cpath fill=\"#e58139\" stroke=\"black\" d=\"M418,-536.5C418,-536.5 325,-536.5 325,-536.5 319,-536.5 313,-530.5 313,-524.5 313,-524.5 313,-480.5 313,-480.5 313,-474.5 319,-468.5 325,-468.5 325,-468.5 418,-468.5 418,-468.5 424,-468.5 430,-474.5 430,-480.5 430,-480.5 430,-524.5 430,-524.5 430,-530.5 424,-536.5 418,-536.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"343.5\" y=\"-521.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"330.5\" y=\"-506.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 31\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"321\" y=\"-491.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [31, 0, 0]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"328\" y=\"-476.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = setosa\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 0\u0026#45;\u0026gt;1 --\u003e\n\u003cg id=\"edge1\" class=\"edge\"\u003e\n\u003ctitle\u003e0\u0026#45;\u0026gt;1\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M421.79,-579.91C414.38,-568.65 406.33,-556.42 398.88,-545.11\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"401.75,-543.1 393.33,-536.67 395.9,-546.94 401.75,-543.1\"/\u003e\n\u003ctext text-anchor=\"middle\" x=\"388.28\" y=\"-557.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eTrue\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 2 --\u003e\n\u003cg id=\"node3\" class=\"node\"\u003e\n\u003ctitle\u003e2\u003c/title\u003e\n\u003cpath fill=\"#ffffff\" stroke=\"black\" d=\"M590.5,-544C590.5,-544 460.5,-544 460.5,-544 454.5,-544 448.5,-538 448.5,-532 448.5,-532 448.5,-473 448.5,-473 448.5,-467 454.5,-461 460.5,-461 460.5,-461 590.5,-461 590.5,-461 596.5,-461 602.5,-467 602.5,-473 602.5,-473 602.5,-532 602.5,-532 602.5,-538 596.5,-544 590.5,-544\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"456.5\" y=\"-528.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal width (cm) ≤ 1.75\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"497.5\" y=\"-513.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.5\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"484.5\" y=\"-498.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 74\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"471\" y=\"-483.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 37, 37]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"473\" y=\"-468.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 0\u0026#45;\u0026gt;2 --\u003e\n\u003cg id=\"edge2\" class=\"edge\"\u003e\n\u003ctitle\u003e0\u0026#45;\u0026gt;2\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M475.21,-579.91C481.01,-571.1 487.2,-561.7 493.18,-552.61\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"496.26,-554.3 498.83,-544.02 490.41,-550.45 496.26,-554.3\"/\u003e\n\u003ctext text-anchor=\"middle\" x=\"503.88\" y=\"-564.81\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eFalse\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 3 --\u003e\n\u003cg id=\"node4\" class=\"node\"\u003e\n\u003ctitle\u003e3\u003c/title\u003e\n\u003cpath fill=\"#54e992\" stroke=\"black\" d=\"M480,-425C480,-425 345,-425 345,-425 339,-425 333,-419 333,-413 333,-413 333,-354 333,-354 333,-348 339,-342 345,-342 345,-342 480,-342 480,-342 486,-342 492,-348 492,-354 492,-354 492,-413 492,-413 492,-419 486,-425 480,-425\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"341\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal length (cm) ≤ 4.95\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"377\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.214\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"371.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 41\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"362\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 36, 5]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"360\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 2\u0026#45;\u0026gt;3 --\u003e\n\u003cg id=\"edge3\" class=\"edge\"\u003e\n\u003ctitle\u003e2\u0026#45;\u0026gt;3\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M486.3,-460.91C477.44,-451.74 467.96,-441.93 458.85,-432.49\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"461.1,-429.78 451.64,-425.02 456.07,-434.65 461.1,-429.78\"/\u003e\n\u003c/g\u003e\n\u003c!-- 12 --\u003e\n\u003cg id=\"node13\" class=\"node\"\u003e\n\u003ctitle\u003e12\u003c/title\u003e\n\u003cpath fill=\"#853fe6\" stroke=\"black\" d=\"M706,-425C706,-425 571,-425 571,-425 565,-425 559,-419 559,-413 559,-413 559,-354 559,-354 559,-348 565,-342 571,-342 571,-342 706,-342 706,-342 712,-342 718,-348 718,-354 718,-354 718,-413 718,-413 718,-419 712,-425 706,-425\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"567\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal length (cm) ≤ 4.85\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"603\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.059\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"597.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 33\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"588\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 1, 32]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"590\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 2\u0026#45;\u0026gt;12 --\u003e\n\u003cg id=\"edge12\" class=\"edge\"\u003e\n\u003ctitle\u003e2\u0026#45;\u0026gt;12\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M564.7,-460.91C573.56,-451.74 583.04,-441.93 592.15,-432.49\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"594.93,-434.65 599.36,-425.02 589.9,-429.78 594.93,-434.65\"/\u003e\n\u003c/g\u003e\n\u003c!-- 4 --\u003e\n\u003cg id=\"node5\" class=\"node\"\u003e\n\u003ctitle\u003e4\u003c/title\u003e\n\u003cpath fill=\"#3fe685\" stroke=\"black\" d=\"M256.5,-306C256.5,-306 134.5,-306 134.5,-306 128.5,-306 122.5,-300 122.5,-294 122.5,-294 122.5,-235 122.5,-235 122.5,-229 128.5,-223 134.5,-223 134.5,-223 256.5,-223 256.5,-223 262.5,-223 268.5,-229 268.5,-235 268.5,-235 268.5,-294 268.5,-294 268.5,-300 262.5,-306 256.5,-306\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"130.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal width (cm) ≤ 1.6\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"160\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.056\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"154.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 35\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"145\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 34, 1]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"143\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 3\u0026#45;\u0026gt;4 --\u003e\n\u003cg id=\"edge4\" class=\"edge\"\u003e\n\u003ctitle\u003e3\u0026#45;\u0026gt;4\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M337.21,-341.91C318,-331.55 297.25,-320.36 277.71,-309.82\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"279.29,-306.7 268.82,-305.03 275.96,-312.86 279.29,-306.7\"/\u003e\n\u003c/g\u003e\n\u003c!-- 7 --\u003e\n\u003cg id=\"node8\" class=\"node\"\u003e\n\u003ctitle\u003e7\u003c/title\u003e\n\u003cpath fill=\"#c09cf2\" stroke=\"black\" d=\"M477.5,-306C477.5,-306 347.5,-306 347.5,-306 341.5,-306 335.5,-300 335.5,-294 335.5,-294 335.5,-235 335.5,-235 335.5,-229 341.5,-223 347.5,-223 347.5,-223 477.5,-223 477.5,-223 483.5,-223 489.5,-229 489.5,-235 489.5,-235 489.5,-294 489.5,-294 489.5,-300 483.5,-306 477.5,-306\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"343.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal width (cm) ≤ 1.55\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"377\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.444\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"375\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 6\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"365.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 2, 4]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"364\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 3\u0026#45;\u0026gt;7 --\u003e\n\u003cg id=\"edge7\" class=\"edge\"\u003e\n\u003ctitle\u003e3\u0026#45;\u0026gt;7\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M412.5,-341.91C412.5,-333.65 412.5,-324.86 412.5,-316.3\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"416,-316.02 412.5,-306.02 409,-316.02 416,-316.02\"/\u003e\n\u003c/g\u003e\n\u003c!-- 5 --\u003e\n\u003cg id=\"node6\" class=\"node\"\u003e\n\u003ctitle\u003e5\u003c/title\u003e\n\u003cpath fill=\"#39e581\" stroke=\"black\" d=\"M109,-179.5C109,-179.5 12,-179.5 12,-179.5 6,-179.5 0,-173.5 0,-167.5 0,-167.5 0,-123.5 0,-123.5 0,-117.5 6,-111.5 12,-111.5 12,-111.5 109,-111.5 109,-111.5 115,-111.5 121,-117.5 121,-123.5 121,-123.5 121,-167.5 121,-167.5 121,-173.5 115,-179.5 109,-179.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"32.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"19.5\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 34\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"10\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 34, 0]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"8\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 4\u0026#45;\u0026gt;5 --\u003e\n\u003cg id=\"edge5\" class=\"edge\"\u003e\n\u003ctitle\u003e4\u0026#45;\u0026gt;5\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M148.66,-222.91C135.04,-211.1 120.17,-198.22 106.6,-186.45\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"108.62,-183.57 98.77,-179.67 104.03,-188.86 108.62,-183.57\"/\u003e\n\u003c/g\u003e\n\u003c!-- 6 --\u003e\n\u003cg id=\"node7\" class=\"node\"\u003e\n\u003ctitle\u003e6\u003c/title\u003e\n\u003cpath fill=\"#8139e5\" stroke=\"black\" d=\"M240,-179.5C240,-179.5 151,-179.5 151,-179.5 145,-179.5 139,-173.5 139,-167.5 139,-167.5 139,-123.5 139,-123.5 139,-117.5 145,-111.5 151,-111.5 151,-111.5 240,-111.5 240,-111.5 246,-111.5 252,-117.5 252,-123.5 252,-123.5 252,-167.5 252,-167.5 252,-173.5 246,-179.5 240,-179.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"167.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"158\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 1\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"148.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 0, 1]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"147\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 4\u0026#45;\u0026gt;6 --\u003e\n\u003cg id=\"edge6\" class=\"edge\"\u003e\n\u003ctitle\u003e4\u0026#45;\u0026gt;6\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M195.5,-222.91C195.5,-212.2 195.5,-200.62 195.5,-189.78\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"199,-189.67 195.5,-179.67 192,-189.67 199,-189.67\"/\u003e\n\u003c/g\u003e\n\u003c!-- 8 --\u003e\n\u003cg id=\"node9\" class=\"node\"\u003e\n\u003ctitle\u003e8\u003c/title\u003e\n\u003cpath fill=\"#8139e5\" stroke=\"black\" d=\"M371,-179.5C371,-179.5 282,-179.5 282,-179.5 276,-179.5 270,-173.5 270,-167.5 270,-167.5 270,-123.5 270,-123.5 270,-117.5 276,-111.5 282,-111.5 282,-111.5 371,-111.5 371,-111.5 377,-111.5 383,-117.5 383,-123.5 383,-123.5 383,-167.5 383,-167.5 383,-173.5 377,-179.5 371,-179.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"298.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"289\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 3\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"279.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 0, 3]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"278\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 7\u0026#45;\u0026gt;8 --\u003e\n\u003cg id=\"edge8\" class=\"edge\"\u003e\n\u003ctitle\u003e7\u0026#45;\u0026gt;8\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M382.66,-222.91C374.31,-211.54 365.22,-199.18 356.84,-187.77\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"359.62,-185.65 350.88,-179.67 353.98,-189.8 359.62,-185.65\"/\u003e\n\u003c/g\u003e\n\u003c!-- 9 --\u003e\n\u003cg id=\"node10\" class=\"node\"\u003e\n\u003ctitle\u003e9\u003c/title\u003e\n\u003cpath fill=\"#9cf2c0\" stroke=\"black\" d=\"M548,-187C548,-187 413,-187 413,-187 407,-187 401,-181 401,-175 401,-175 401,-116 401,-116 401,-110 407,-104 413,-104 413,-104 548,-104 548,-104 554,-104 560,-110 560,-116 560,-116 560,-175 560,-175 560,-181 554,-187 548,-187\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"409\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003epetal length (cm) ≤ 5.45\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"445\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.444\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"443\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 3\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"433.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 2, 1]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"428\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 7\u0026#45;\u0026gt;9 --\u003e\n\u003cg id=\"edge9\" class=\"edge\"\u003e\n\u003ctitle\u003e7\u0026#45;\u0026gt;9\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M436.09,-222.91C441.16,-214.2 446.56,-204.9 451.79,-195.89\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"454.95,-197.43 456.95,-187.02 448.9,-193.91 454.95,-197.43\"/\u003e\n\u003c/g\u003e\n\u003c!-- 10 --\u003e\n\u003cg id=\"node11\" class=\"node\"\u003e\n\u003ctitle\u003e10\u003c/title\u003e\n\u003cpath fill=\"#39e581\" stroke=\"black\" d=\"M461,-68C461,-68 364,-68 364,-68 358,-68 352,-62 352,-56 352,-56 352,-12 352,-12 352,-6 358,0 364,0 364,0 461,0 461,0 467,0 473,-6 473,-12 473,-12 473,-56 473,-56 473,-62 467,-68 461,-68\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"384.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"375\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 2\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"365.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 2, 0]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"360\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 9\u0026#45;\u0026gt;10 --\u003e\n\u003cg id=\"edge10\" class=\"edge\"\u003e\n\u003ctitle\u003e9\u0026#45;\u0026gt;10\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M455.18,-103.73C449.74,-94.97 443.99,-85.7 438.52,-76.91\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"441.43,-74.95 433.18,-68.3 435.48,-78.64 441.43,-74.95\"/\u003e\n\u003c/g\u003e\n\u003c!-- 11 --\u003e\n\u003cg id=\"node12\" class=\"node\"\u003e\n\u003ctitle\u003e11\u003c/title\u003e\n\u003cpath fill=\"#8139e5\" stroke=\"black\" d=\"M592,-68C592,-68 503,-68 503,-68 497,-68 491,-62 491,-56 491,-56 491,-12 491,-12 491,-6 497,0 503,0 503,0 592,0 592,0 598,0 604,-6 604,-12 604,-12 604,-56 604,-56 604,-62 598,-68 592,-68\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"519.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"510\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 1\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"500.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 0, 1]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"499\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 9\u0026#45;\u0026gt;11 --\u003e\n\u003cg id=\"edge11\" class=\"edge\"\u003e\n\u003ctitle\u003e9\u0026#45;\u0026gt;11\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M505.45,-103.73C510.81,-94.97 516.48,-85.7 521.86,-76.91\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"524.89,-78.66 527.12,-68.3 518.92,-75 524.89,-78.66\"/\u003e\n\u003c/g\u003e\n\u003c!-- 13 --\u003e\n\u003cg id=\"node14\" class=\"node\"\u003e\n\u003ctitle\u003e13\u003c/title\u003e\n\u003cpath fill=\"#c09cf2\" stroke=\"black\" d=\"M707.5,-306C707.5,-306 569.5,-306 569.5,-306 563.5,-306 557.5,-300 557.5,-294 557.5,-294 557.5,-235 557.5,-235 557.5,-229 563.5,-223 569.5,-223 569.5,-223 707.5,-223 707.5,-223 713.5,-223 719.5,-229 719.5,-235 719.5,-235 719.5,-294 719.5,-294 719.5,-300 713.5,-306 707.5,-306\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"565.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esepal length (cm) ≤ 5.95\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"603\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.444\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"601\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 3\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"591.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 1, 2]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"590\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 12\u0026#45;\u0026gt;13 --\u003e\n\u003cg id=\"edge13\" class=\"edge\"\u003e\n\u003ctitle\u003e12\u0026#45;\u0026gt;13\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M638.5,-341.91C638.5,-333.65 638.5,-324.86 638.5,-316.3\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"642,-316.02 638.5,-306.02 635,-316.02 642,-316.02\"/\u003e\n\u003c/g\u003e\n\u003c!-- 16 --\u003e\n\u003cg id=\"node17\" class=\"node\"\u003e\n\u003ctitle\u003e16\u003c/title\u003e\n\u003cpath fill=\"#8139e5\" stroke=\"black\" d=\"M843,-298.5C843,-298.5 750,-298.5 750,-298.5 744,-298.5 738,-292.5 738,-286.5 738,-286.5 738,-242.5 738,-242.5 738,-236.5 744,-230.5 750,-230.5 750,-230.5 843,-230.5 843,-230.5 849,-230.5 855,-236.5 855,-242.5 855,-242.5 855,-286.5 855,-286.5 855,-292.5 849,-298.5 843,-298.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"768.5\" y=\"-283.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"755.5\" y=\"-268.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 30\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"746\" y=\"-253.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 0, 30]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"748\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 12\u0026#45;\u0026gt;16 --\u003e\n\u003cg id=\"edge16\" class=\"edge\"\u003e\n\u003ctitle\u003e12\u0026#45;\u0026gt;16\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M693.32,-341.91C709.56,-329.88 727.31,-316.73 743.44,-304.79\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"745.76,-307.43 751.71,-298.67 741.59,-301.81 745.76,-307.43\"/\u003e\n\u003c/g\u003e\n\u003c!-- 14 --\u003e\n\u003cg id=\"node15\" class=\"node\"\u003e\n\u003ctitle\u003e14\u003c/title\u003e\n\u003cpath fill=\"#39e581\" stroke=\"black\" d=\"M687,-179.5C687,-179.5 590,-179.5 590,-179.5 584,-179.5 578,-173.5 578,-167.5 578,-167.5 578,-123.5 578,-123.5 578,-117.5 584,-111.5 590,-111.5 590,-111.5 687,-111.5 687,-111.5 693,-111.5 699,-117.5 699,-123.5 699,-123.5 699,-167.5 699,-167.5 699,-173.5 693,-179.5 687,-179.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"610.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"601\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 1\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"591.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 1, 0]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"586\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = versicolor\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 13\u0026#45;\u0026gt;14 --\u003e\n\u003cg id=\"edge14\" class=\"edge\"\u003e\n\u003ctitle\u003e13\u0026#45;\u0026gt;14\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M638.5,-222.91C638.5,-212.2 638.5,-200.62 638.5,-189.78\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"642,-189.67 638.5,-179.67 635,-189.67 642,-189.67\"/\u003e\n\u003c/g\u003e\n\u003c!-- 15 --\u003e\n\u003cg id=\"node16\" class=\"node\"\u003e\n\u003ctitle\u003e15\u003c/title\u003e\n\u003cpath fill=\"#8139e5\" stroke=\"black\" d=\"M818,-179.5C818,-179.5 729,-179.5 729,-179.5 723,-179.5 717,-173.5 717,-167.5 717,-167.5 717,-123.5 717,-123.5 717,-117.5 723,-111.5 729,-111.5 729,-111.5 818,-111.5 818,-111.5 824,-111.5 830,-117.5 830,-123.5 830,-123.5 830,-167.5 830,-167.5 830,-173.5 824,-179.5 818,-179.5\"/\u003e\n\u003ctext text-anchor=\"start\" x=\"745.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003egini = 0.0\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"736\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003esamples = 2\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"726.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003evalue = [0, 0, 2]\u003c/text\u003e\n\u003ctext text-anchor=\"start\" x=\"725\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\"\u003eclass = virginica\u003c/text\u003e\n\u003c/g\u003e\n\u003c!-- 13\u0026#45;\u0026gt;15 --\u003e\n\u003cg id=\"edge15\" class=\"edge\"\u003e\n\u003ctitle\u003e13\u0026#45;\u0026gt;15\u003c/title\u003e\n\u003cpath fill=\"none\" stroke=\"black\" d=\"M685.34,-222.91C698.96,-211.1 713.83,-198.22 727.4,-186.45\"/\u003e\n\u003cpolygon fill=\"black\" stroke=\"black\" points=\"729.97,-188.86 735.23,-179.67 725.38,-183.57 729.97,-188.86\"/\u003e\n\u003c/g\u003e\n\u003c/g\u003e\n\u003c/svg\u003e\n","text/plain":["\u003cgraphviz.sources.Source at 0x7db3f8c5fb10\u003e"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier, export_graphviz\n","import graphviz\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object\n","clf = DecisionTreeClassifier()\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Export the decision tree to a dot file\n","export_graphviz(clf, out_file=\"tree.dot\",\n","                feature_names=iris.feature_names,\n","                class_names=iris.target_names,\n","                filled=True, rounded=True,\n","                special_characters=True)\n","\n","# Visualize the tree using graphviz\n","with open(\"tree.dot\") as f:\n","    dot_graph = f.read()\n","graphviz.Source(dot_graph)"]},{"cell_type":"markdown","metadata":{"id":"aykXZmD0CKJN"},"source":["Reasoning:\n","\n","Import necessary libraries: We import load_iris for the dataset, train_test_split for data splitting, DecisionTreeClassifier and export_graphviz for the model and visualization, and graphviz for rendering.\n","Load and split the data: Similar to previous examples, we load the Iris dataset and split it into training and testing sets.\n","Create and train the model: We create a DecisionTreeClassifier object and train it using the training data.\n","Export the tree: export_graphviz converts the trained tree into a dot file (tree.dot). We provide feature names, class names, and formatting options for better visualization.\n","Visualize the tree: We use graphviz.Source to read the dot file and render the tree visualization within your Colab environment.\n","Before running the code:\n","\n","Install graphviz: If you haven't already, install the graphviz library in your Colab environment:\n","!pip install graphviz\n","Use code with caution\n","Install system dependencies: You might also need to install system dependencies for graphviz. Run the following command in your Colab cell:\n","!apt-get install graphviz\n","Use code with caution\n","After running the code, you should see the decision tree visualization displayed in your Colab output."]},{"cell_type":"markdown","metadata":{"id":"6mboI9rBCOz2"},"source":["21. **Write a Python program to train a Decision Tree Classifier with a maximum depth of 3 and compare its\n","accuracy with a fully grown tree ?**"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2568,"status":"ok","timestamp":1747297412876,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"qr0_JSHECl1X","outputId":"5b45be70-e9c0-4134-a2f8-ad2dd1ca0ddb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy (Limited Depth): 1.0\n","Accuracy (Full Tree): 1.0\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier with maximum depth of 3\n","clf_limited = DecisionTreeClassifier(max_depth=3)\n","\n","# Create a fully grown Decision Tree Classifier\n","clf_full = DecisionTreeClassifier()\n","\n","# Train the classifiers\n","clf_limited.fit(X_train, y_train)\n","clf_full.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred_limited = clf_limited.predict(X_test)\n","y_pred_full = clf_full.predict(X_test)\n","\n","# Calculate accuracy scores\n","accuracy_limited = accuracy_score(y_test, y_pred_limited)\n","accuracy_full = accuracy_score(y_test, y_pred_full)\n","\n","# Print the accuracy scores\n","print(\"Accuracy (Limited Depth):\", accuracy_limited)\n","print(\"Accuracy (Full Tree):\", accuracy_full)"]},{"cell_type":"markdown","metadata":{"id":"B-D92FfzCrxL"},"source":["Reasoning\n","\n","Import necessary libraries: We import load_iris for the dataset, train_test_split for data splitting, DecisionTreeClassifier for the model, and accuracy_score for evaluation.\n","Load and split the data: Similar to previous examples, we load the Iris dataset and split it into training and testing sets.\n","Create two classifiers: We create two DecisionTreeClassifier objects:\n","clf_limited: With max_depth=3 to restrict the tree's depth.\n","clf_full: Without any depth restriction, allowing it to grow fully.\n","Train the classifiers: We train both classifiers using the training data.\n","Make predictions: We make predictions on the testing data using both classifiers.\n","Calculate and print accuracy: We calculate the accuracy scores for both classifiers using accuracy_score and print them for comparison.\n","By comparing the accuracy scores, you can observe the effect of limiting the tree's depth on its performance. In some cases, limiting the depth can help prevent overfitting and improve generalization to unseen data. In other cases, a fully grown tree might achieve better accuracy on the training data but could potentially overfit."]},{"cell_type":"markdown","metadata":{"id":"AcLKTvPICtFN"},"source":["22. **Write a Python program to train a Decision Tree Classifier using min_samples_split=5 and compare its\n","accuracy with a default tree ?**"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2113,"status":"ok","timestamp":1747297529104,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"N35CBKxWCydb","outputId":"a596577e-4373-4adc-da93-8de92b615416"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy (min_samples_split=5): 1.0\n","Accuracy (Default): 1.0\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier with min_samples_split=5\n","clf_min_split = DecisionTreeClassifier(min_samples_split=5)\n","\n","# Create a default Decision Tree Classifier\n","clf_default = DecisionTreeClassifier()\n","\n","# Train the classifiers\n","clf_min_split.fit(X_train, y_train)\n","clf_default.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred_min_split = clf_min_split.predict(X_test)\n","y_pred_default = clf_default.predict(X_test)\n","\n","# Calculate accuracy scores\n","accuracy_min_split = accuracy_score(y_test, y_pred_min_split)\n","accuracy_default = accuracy_score(y_test, y_pred_default)\n","\n","# Print the accuracy scores\n","print(\"Accuracy (min_samples_split=5):\", accuracy_min_split)\n","print(\"Accuracy (Default):\", accuracy_default)"]},{"cell_type":"markdown","metadata":{"id":"CQfUxMN4DJOY"},"source":["Reasoning:\n","\n","Import necessary libraries: We import the usual libraries for loading the dataset, splitting data, creating the model, and evaluating accuracy.\n","Load and split the data: We load the Iris dataset and split it into training and testing sets.\n","Create two classifiers:\n","clf_min_split: This classifier is created with min_samples_split=5, meaning a node will only be split if it has at least 5 samples.\n","clf_default: This classifier is created with default parameters, which means it will use the default value for min_samples_split (usually 2).\n","Train the classifiers: Both classifiers are trained using the training data.\n","Make predictions: Predictions are made on the testing data using both classifiers.\n","Calculate and print accuracy: The accuracy scores for both classifiers are calculated and printed to compare their performance.\n","By comparing the accuracy scores, you can observe the effect of changing the min_samples_split parameter on the model's performance. Increasing min_samples_split can sometimes help prevent overfitting, as it makes the tree less likely to create very specific splits based on small groups of data points. However, it can also lead to underfitting if the value is too high."]},{"cell_type":"markdown","metadata":{"id":"Sd9F9W-5DKgK"},"source":["23. **Write a Python program to apply feature scaling before training a Decision Tree Classifier and compare its\n","accuracy with unscaled data ?**"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1373,"status":"ok","timestamp":1747297610218,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"TlzRb-D-DRj2","outputId":"aad8f85b-31e5-436f-c292-afe7eba1e424"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy (Scaled Data): 1.0\n","Accuracy (Unscaled Data): 1.0\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a StandardScaler object\n","scaler = StandardScaler()\n","\n","# Fit the scaler on the training data and transform\n","X_train_scaled = scaler.fit_transform(X_train)\n","\n","# Transform the testing data using the fitted scaler\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Create and train a Decision Tree Classifier with scaled data\n","clf_scaled = DecisionTreeClassifier()\n","clf_scaled.fit(X_train_scaled, y_train)\n","\n","# Create and train a Decision Tree Classifier with unscaled data\n","clf_unscaled = DecisionTreeClassifier()\n","clf_unscaled.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred_scaled = clf_scaled.predict(X_test_scaled)\n","y_pred_unscaled = clf_unscaled.predict(X_test)\n","\n","# Calculate accuracy scores\n","accuracy_scaled = accuracy_score(y_test, y_pred_scaled)\n","accuracy_unscaled = accuracy_score(y_test, y_pred_unscaled)\n","\n","# Print the accuracy scores\n","print(\"Accuracy (Scaled Data):\", accuracy_scaled)\n","print(\"Accuracy (Unscaled Data):\", accuracy_unscaled)"]},{"cell_type":"markdown","metadata":{"id":"2exBTOLiDdD5"},"source":["Reasoning:\n","\n","Import necessary libraries: We import load_iris, train_test_split, DecisionTreeClassifier, StandardScaler, and accuracy_score.\n","Load and split the data: We load the Iris dataset and split it into training and testing sets.\n","Feature scaling:\n","Create a StandardScaler object to perform standardization.\n","Fit the scaler on the training data using fit_transform to learn the scaling parameters.\n","Transform both the training and testing data using the fitted scaler.\n","Create and train classifiers:\n","clf_scaled: Trained on the scaled data.\n","clf_unscaled: Trained on the original, unscaled data.\n","Make predictions: Predictions are made on the appropriately scaled testing data for each classifier.\n","Calculate and print accuracy: The accuracy scores for both classifiers are calculated and printed to compare their performance.\n","Important considerations\n","\n","Decision Trees and Feature Scaling: Decision Trees are generally not very sensitive to feature scaling. This is because they make decisions based on thresholds on individual features, and scaling doesn't change the relative order of values within a feature.\n","Potential Impact: In some cases, feature scaling might slightly improve or worsen the accuracy of a Decision Tree Classifier, but the difference is usually not significant.\n","Experimentation: It's always a good idea to experiment with both scaled and unscaled data to see if there's any noticeable impact on your specific dataset and task."]},{"cell_type":"markdown","metadata":{"id":"0enYFNG_DeVI"},"source":["24. **Write a Python program to train a Decision Tree Classifier using One-vs-Rest (OvR) strategy for multiclass\n","classification ?**"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1193,"status":"ok","timestamp":1747297681256,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"7u_IrcbZDkJv","outputId":"fa4c6eed-2d1c-4991-db20-3cb817b189f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 1.0\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.multiclass import OneVsRestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier as the base estimator\n","base_estimator = DecisionTreeClassifier()\n","\n","# Create an OvR classifier using the Decision Tree as the base estimator\n","ovr_classifier = OneVsRestClassifier(base_estimator)\n","\n","# Train the OvR classifier on the training data\n","ovr_classifier.fit(X_train, y_train)\n","\n","# Make predictions on the testing data\n","y_pred = ovr_classifier.predict(X_test)\n","\n","# Calculate the accuracy of the model\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","# Print the accuracy\n","print(\"Accuracy:\", accuracy)"]},{"cell_type":"markdown","metadata":{"id":"CJvscvDLD8IE"},"source":["Reasoning:\n","\n","Import necessary libraries: We import load_iris for the dataset, train_test_split for data splitting, DecisionTreeClassifier for the base model, OneVsRestClassifier for the OvR strategy, and accuracy_score for evaluation.\n","Load and split the data: We load the Iris dataset, which is a multi-class classification problem, and split it into training and testing sets.\n","Create the base estimator: We create a DecisionTreeClassifier object as the base estimator, which will be used by the OvR classifier.\n","Create the OvR classifier: We create an OneVsRestClassifier object, passing the base_estimator as an argument. This sets up the OvR strategy using the Decision Tree as the underlying model.\n","Train the OvR classifier: We train the ovr_classifier using the training data (X_train, y_train).\n","Make predictions: We make predictions on the testing data (X_test) using the trained OvR classifier.\n","Calculate and print accuracy: We calculate the accuracy of the model using accuracy_score and print it to evaluate its performance.\n","How OvR works\n","\n","Binary Classifiers: OvR creates a separate binary classifier for each class in the dataset.\n","Training: Each classifier is trained to distinguish between one class (the \"positive\" class) and all other classes (the \"negative\" class).\n","Prediction: When making a prediction for a new data point, the OvR classifier runs all the binary classifiers and assigns the data point to the class with the highest predicted probability or confidence.\n","This approach allows Decision Trees, which are inherently binary classifiers, to be used for multi-class classification problems."]},{"cell_type":"markdown","metadata":{"id":"scERZ03kD_hH"},"source":["25. **Write a Python program to train a Decision Tree Classifier and display the feature importance scores ?**"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1747297845595,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"yJZ6SLRnEFIb","outputId":"835eafb5-124a-46dd-b1e1-dad427bd66c6"},"outputs":[{"name":"stdout","output_type":"stream","text":["             Feature  Importance\n","2  petal length (cm)    0.557274\n","3   petal width (cm)    0.423616\n","0  sepal length (cm)    0.019110\n","1   sepal width (cm)    0.000000\n"]}],"source":["# Import necessary libraries\n","import pandas as pd  # For creating DataFrames for better display\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object\n","clf = DecisionTreeClassifier()\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Get feature importances\n","importances = clf.feature_importances_\n","\n","# Create a DataFrame for better display\n","feature_importances = pd.DataFrame({'Feature': iris.feature_names, 'Importance': importances})\n","\n","# Sort the DataFrame by importance in descending order\n","feature_importances = feature_importances.sort_values(by='Importance', ascending=False)\n","\n","# Display the feature importances\n","print(feature_importances)"]},{"cell_type":"markdown","metadata":{"id":"kjejHyjBEWe6"},"source":["Reasoning\n","\n","Import necessary libraries: We import pandas for creating DataFrames, load_iris for the dataset, train_test_split for data splitting, and DecisionTreeClassifier for the model.\n","Load and split the data: We load the Iris dataset and split it into training and testing sets.\n","Create and train the classifier: We create a DecisionTreeClassifier object and train it using the training data.\n","Get feature importances: We access the feature importance scores using clf.feature_importances_.\n","Create a DataFrame: We create a pandas DataFrame to store the feature names and their corresponding importance scores for better display.\n","Sort the DataFrame: We sort the DataFrame in descending order of importance to easily see the most important features.\n","Display the feature importances: We print the DataFrame to display the feature importance scores.\n","Understanding Feature Importance\n","\n","Gini Importance/Mean Decrease Impurity: The feature importance scores in a Decision Tree are calculated based on how much each feature reduces the impurity (Gini impurity or entropy) of the nodes in the tree.\n","Higher Scores: Features with higher importance scores contribute more to the decision-making process of the tree and are considered more important for predicting the target variable."]},{"cell_type":"markdown","metadata":{"id":"-hNH22KqEaO6"},"source":["26. **Write a Python program to train a Decision Tree Regressor with max_depth=5 and compare its performance\n","with an unrestricted tree ?**"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"executionInfo":{"elapsed":681,"status":"error","timestamp":1747297937509,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"9PspYrxyEg9L","outputId":"d827201a-835d-48e6-8d54-2830617b59e2"},"outputs":[{"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'housing.csv'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-11-2109daa33cc4\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 0\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Load the dataset (replace 'housing.csv' with your dataset file)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 8\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'housing.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Assuming 'target' is the target variable column name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'housing.csv'"]}],"source":["# Import necessary libraries\n","import pandas as pd\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","# Load the dataset (replace 'housing.csv' with your dataset file)\n","data = pd.read_csv('housing.csv')\n","\n","# Assuming 'target' is the target variable column name\n","X = data.drop('target', axis=1)\n","y = data['target']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create a Decision Tree Regressor with max_depth=5\n","regressor_limited = DecisionTreeRegressor(max_depth=5)\n","\n","# Create an unrestricted Decision Tree Regressor\n","regressor_unrestricted = DecisionTreeRegressor()\n","\n","# Train the regressors\n","regressor_limited.fit(X_train, y_train)\n","regressor_unrestricted.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred_limited = regressor_limited.predict(X_test)\n","y_pred_unrestricted = regressor_unrestricted.predict(X_test)\n","\n","# Calculate Mean Squared Error (MSE)\n","mse_limited = mean_squared_error(y_test, y_pred_limited)\n","mse_unrestricted = mean_squared_error(y_test, y_pred_unrestricted)\n","\n","# Print the MSE scores\n","print(\"MSE (Limited Depth):\", mse_limited)\n","print(\"MSE (Unrestricted):\", mse_unrestricted)"]},{"cell_type":"markdown","metadata":{"id":"A9GOBJvwErYw"},"source":["Reasoning\n","\n","Import necessary libraries: We import pandas for data handling, DecisionTreeRegressor for the model, train_test_split for data splitting, and mean_squared_error for evaluation.\n","Load the dataset: Replace 'housing.csv' with the actual path to your housing dataset file. We use pd.read_csv to load the data into a pandas DataFrame.\n","Prepare the data: Assuming your target variable column is named 'target', we separate features (X) and the target (y) using data.drop and data['target'], respectively.\n","Split the data: train_test_split divides the data into training and testing sets (80% for training, 20% for testing). random_state ensures consistent splitting.\n","Create and train regressors:\n","regressor_limited: This regressor is created with max_depth=5, restricting the tree's depth.\n","regressor_unrestricted: This regressor is created without any depth restriction, allowing it to grow fully.\n","Make predictions: We make predictions on the testing data using both regressors.\n","Calculate and print MSE: We calculate the Mean Squared Error (MSE) for both regressors using mean_squared_error and print them for comparison.\n","Before running the code\n","\n","Replace 'housing.csv' with the actual path to your housing dataset file.\n","Ensure that the target variable column in your dataset is named 'target'. If it's named differently, adjust the code accordingly (e.g., y = data['house_price']).\n","By comparing the MSE scores, you can observe the effect of limiting the tree's depth on its performance. In regression tasks, limiting the depth can help prevent overfitting and improve generalization to unseen data, often resulting in a lower MSE on the testing set. However, it can also lead to underfitting if the value is too low."]},{"cell_type":"markdown","metadata":{"id":"qbzdIXKLEvw2"},"source":["27. **Write a Python program to train a Decision Tree Classifier, apply Cost Complexity Pruning (CCP), and\n","visualize its effect on accuracy ?**"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":2266,"status":"ok","timestamp":1747298039647,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"Bx4r218FE_XQ","outputId":"266ef34e-ba84-43ed-f794-2e0b1113ce59"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1000x600 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import cross_val_score\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object\n","clf = DecisionTreeClassifier(random_state=0)\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Get the effective alphas and impurities from the trained tree\n","path = clf.cost_complexity_pruning_path(X_train, y_train)\n","ccp_alphas, impurities = path.ccp_alphas, path.impurities\n","\n","# Create a list to store the accuracy scores for different alphas\n","acc_scores = []\n","\n","# Iterate over different values of alpha\n","for ccp_alpha in ccp_alphas:\n","    # Create a new Decision Tree Classifier with the current alpha\n","    clf_ccp = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n","\n","    # Train the classifier on the training data\n","    clf_ccp.fit(X_train, y_train)\n","\n","    # Make predictions on the testing data\n","    y_pred = clf_ccp.predict(X_test)\n","\n","    # Calculate and store the accuracy score\n","    acc_scores.append(accuracy_score(y_test, y_pred))\n","\n","# Plot the accuracy scores vs. alphas\n","plt.figure(figsize=(10, 6))\n","plt.plot(ccp_alphas, acc_scores, marker='o', drawstyle=\"steps-post\")\n","plt.xlabel(\"alpha\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Accuracy vs alpha for training and testing sets\")\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"bKVBmmv6FEcv"},"source":["Reasoning:\n","\n","Import Libraries: Import necessary libraries including matplotlib.pyplot for plotting.\n","Load and Split Data: Load the Iris dataset and split it into training and testing sets.\n","Create and Train Initial Classifier: Create a DecisionTreeClassifier and train it on the training data.\n","Get CCP Path: Use cost_complexity_pruning_path to get the effective alphas and impurities for pruning.\n","Iterate and Evaluate: Loop through different alpha values, create and train a new classifier with each alpha, make predictions, and store the accuracy scores.\n","Visualize: Plot the accuracy scores against the alpha values using matplotlib.pyplot. This shows how accuracy changes as pruning is applied.\n","How CCP Works:\n","\n","Cost Complexity: CCP considers the complexity of the tree (number of nodes) and the error it makes on the training data.\n","Alpha: The ccp_alpha parameter controls the amount of pruning. Higher alpha values lead to more aggressive pruning.\n","Finding Optimal Alpha: The plot helps you visualize the relationship between alpha and accuracy, allowing you to choose an alpha value that balances complexity and performance."]},{"cell_type":"markdown","metadata":{"id":"nCf54eOiFIVN"},"source":["28. **Write a Python program to train a Decision Tree Classifier and evaluate its performance using Precision,\n","Recall, and F1-Score ?**"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2018,"status":"ok","timestamp":1747298193854,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"},"user_tz":-330},"id":"VAm2-k4dFOm6","outputId":"c075559b-a1f1-4edf-ccc8-9f0b63bd7750"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 1.0\n","Precision: 1.0\n","Recall: 1.0\n","F1-Score: 1.0\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        19\n","           1       1.00      1.00      1.00        13\n","           2       1.00      1.00      1.00        13\n","\n","    accuracy                           1.00        45\n","   macro avg       1.00      1.00      1.00        45\n","weighted avg       1.00      1.00      1.00        45\n","\n"]}],"source":["# Import necessary libraries\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n","\n","# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Create a Decision Tree Classifier object\n","clf = DecisionTreeClassifier()\n","\n","# Train the classifier on the training data\n","clf.fit(X_train, y_train)\n","\n","# Make predictions on the testing data\n","y_pred = clf.predict(X_test)\n","\n","# Calculate and print the evaluation metrics\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"Precision:\", precision_score(y_test, y_pred, average='weighted'))  # Use 'weighted' for multiclass\n","print(\"Recall:\", recall_score(y_test, y_pred, average='weighted'))  # Use 'weighted' for multiclass\n","print(\"F1-Score:\", f1_score(y_test, y_pred, average='weighted'))  # Use 'weighted' for multiclass\n","\n","# You can also use classification_report for a more detailed report\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"2JoeAzywFgr8"},"source":["Reasoning:\n","\n","Import Libraries: Import necessary libraries including precision_score, recall_score, f1_score, and classification_report.\n","Load and Split Data: Load the Iris dataset and split it into training and testing sets.\n","Create and Train Classifier: Create a DecisionTreeClassifier and train it on the training data.\n","Make Predictions: Make predictions on the testing data using the trained classifier.\n","Calculate Metrics:\n","Use precision_score, recall_score, and f1_score with average='weighted' for multi-class problems to calculate the respective metrics.\n","Use classification_report to get a detailed report including precision, recall, F1-score, and support for each class.\n","Print Results: Print the calculated metrics.\n","Understanding the Metrics:\n","\n","Precision: The ratio of correctly predicted positive observations to the total predicted positives.\n","Recall: The ratio of correctly predicted positive observations to all actual positives.\n","F1-Score: The harmonic mean of precision and recall, providing a balance between the two.\n","Classification Report: Provides a comprehensive overview of the model's performance for each class."]},{"cell_type":"markdown","metadata":{"id":"I2LXuvWiFhmH"},"source":["29.  **Write a Python program to train a Decision Tree Classifier and visualize the confusion matrix using seaborn ?**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"LTDfOkViFo08"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 2 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMFQCTMzAl8YOHGYZgwNaxz","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}